diff --git a/requirements.txt b/requirements.txt
index d98c608..c7a0823 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -10,3 +10,58 @@ setuptools==75.1.0
 sqlparse==0.5.1
 urllib3==2.2.3
 wheel==0.44.0
+asgiref==3.8.1
+astroid==3.3.5
+attrs==24.2.0
+autopep8==2.0.4
+certifi==2024.8.30
+charset-normalizer==3.4.0
+coverage==7.6.1
+dill==0.3.9
+Django==4.2.7
+django-stubs==5.1.1
+django-stubs-ext==5.1.1
+docstring-to-markdown==0.15
+flake8==7.1.1
+h11==0.14.0
+idna==3.10
+importlib_metadata==8.5.0
+isort==5.13.2
+jedi==0.19.1
+mccabe==0.7.0
+outcome==1.3.0.post0
+packaging==24.1
+parso==0.8.4
+peewee==3.17.6
+platformdirs==4.3.6
+pluggy==1.5.0
+pycodestyle==2.12.1
+pydocstyle==6.3.0
+pyflakes==3.2.0
+pylint==3.3.1
+PySocks==1.7.1
+python-lsp-jsonrpc==1.1.2
+python-lsp-server==1.12.0
+pytoolconfig==1.3.1
+requests==2.32.3
+rope==1.13.0
+selenium==4.26.0
+setuptools==75.1.0
+sniffio==1.3.1
+snowballstemmer==2.2.0
+sortedcontainers==2.4.0
+sqlparse==0.5.1
+tomli==2.0.2
+tomlkit==0.13.2
+trio==0.27.0
+trio-websocket==0.11.1
+types-PyYAML==6.0.12.20240917
+typing_extensions==4.12.2
+ujson==5.10.0
+urllib3==2.2.3
+websocket-client==1.8.0
+whatthepatch==1.0.6
+wheel==0.44.0
+wsproto==1.2.0
+yapf==0.40.2
+zipp==3.20.2
diff --git a/travel_wishlist/templates/travel_wishlist/visited.html b/travel_wishlist/templates/travel_wishlist/visited.html
index 6e40677..30d99a8 100644
--- a/travel_wishlist/templates/travel_wishlist/visited.html
+++ b/travel_wishlist/templates/travel_wishlist/visited.html
@@ -1,3 +1,6 @@
+{% extends 'travel_wishlist/base.html' %}
+{% block content %}
+
 <h1>Places you have visited</h1>
 
 {% if visited %}
@@ -14,4 +17,4 @@
 
 {% endif %}
 
-<a href="{% url 'place_list' %}">Your wishlist</a>
+{% endblock %}
diff --git a/travel_wishlist/templates/travel_wishlist/wishlist.html b/travel_wishlist/templates/travel_wishlist/wishlist.html
index 7b9c5a4..7d8e37b 100644
--- a/travel_wishlist/templates/travel_wishlist/wishlist.html
+++ b/travel_wishlist/templates/travel_wishlist/wishlist.html
@@ -1,27 +1,32 @@
+{% extends 'travel_wishlist/base.html' %}
+{% block content %}
+
 <h2>Travel Wishlist</h2>
 
 <form method="POST" action="{% url 'place_list' %}">
     {% csrf_token %}
     {{ new_place_form }}
-    <button type="submit">Add</button>
+    <button id="add-new-place" type="submit">Add</button>
 </form>
 
 {% for place in places %}
 
-    <div>
-        {{ place.name }}
+    <div class="wishlist-place">
+        <span id="place-name-{{ place.pk }}" class="place-name">
+            {{ place.name }}
+        </span>
 
         <!-- reverse lookup: action="./place/place.pk/was_visited" -->
-        <form method="POST" action="{% url 'place_was_visited' place.pk %}">
+        <form class="visited-form" method="POST" action="{% url 'place_was_visited' place.pk %}">
             {% csrf_token %}
-            <button type="submit">Visited!</button>
+            <button id="visited-button-{{ place.pk }}" type="submit">Visited!</button>
         </form>
     </div>
 
 {% empty %}
 
-    <p>You have no places in your wishlist</p>
+    <p>You have no places in your wishlist.</p>
 
 {% endfor %}
 
-<a href="{% url 'places_visited' %}">Places you've visited</a>
+{% endblock %}
diff --git a/travel_wishlist/tests.py b/travel_wishlist/tests.py
index 7ce503c..0f92e41 100644
--- a/travel_wishlist/tests.py
+++ b/travel_wishlist/tests.py
@@ -1,3 +1,100 @@
 from django.test import TestCase
+from django.urls import reverse
+from .models import Place
 
-# Create your tests here.
+
+class TestHomePage(TestCase):
+
+    def test_load_home_page_shows_empty_list_for_empty_database(self):
+        # reverse() is a utility function that works like the url template tag
+        # note: uses the main db, doesn't mock one!
+        home_page_url = reverse("place_list")
+        response = self.client.get(home_page_url)
+        self.assertTemplateUsed(response, "travel_wishlist/wishlist.html")
+        self.assertContains(response, "You have no places in your wishlist.")
+
+
+class TestWishList(TestCase):
+
+    fixtures = ["test_places"]  # test data to populate the test db
+
+    def test_view_wishlist_contains_not_visited_places(self):
+        response = self.client.get(reverse("place_list"))
+        self.assertTemplateUsed(response, "travel_wishlist/wishlist.html")
+
+        self.assertContains(response, "Tokyo")
+        self.assertContains(response, "New York")
+        self.assertNotContains(response, "San Francisco")
+        self.assertNotContains(response, "Moab")
+
+
+class TestVisitedPage(TestCase):
+
+    def test_load_visited_page_shows_empty_list_for_no_visited_places(self):
+        response = self.client.get(reverse("places_visited"))
+        self.assertTemplateUsed(response, "travel_wishlist/visited.html")
+
+        self.assertContains(response, "You have not visited any places yet.")
+
+
+class TestVisitedList(TestCase):
+
+    fixtures = ["test_places"]  # test data to populate the test db
+
+    def test_only_visited_places_displayed(self):
+        response = self.client.get(reverse("places_visited"))
+        self.assertTemplateUsed(response, "travel_wishlist/visited.html")
+
+        self.assertNotContains(response, "Tokyo")
+        self.assertNotContains(response, "New York")
+        self.assertContains(response, "San Francisco")
+        self.assertContains(response, "Moab")
+
+
+class TestAddNewPlace(TestCase):
+
+    def test_add_new_unvisited_place_to_wishlist(self):
+        add_place_url = reverse("place_list")
+        new_place_data = {"name": "Tokyo", "visited": False}
+
+        response = self.client.post(add_place_url, new_place_data, follow=True)
+        # check correct template was used
+        self.assertTemplateUsed(response, "travel_wishlist/wishlist.html")
+
+        # check that there's 1 item in the template
+        response_places = response.context["places"]
+        self.assertEqual(1, len(response_places))
+        tokyo_response = response_places[0]
+
+        # expect this data to be in the db. use get() to get data with expected
+        # values. will raise an error if no data or more than 1 row matches.
+        # throwing an exception will cause test to fail
+        tokyo_in_database = Place.objects.get(name="Tokyo", visited=False)
+
+        # data used to render template == db data
+        self.assertEqual(tokyo_in_database, tokyo_response)
+
+
+class TestVisitPlace(TestCase):
+
+    fixtures = ["test_places"]
+
+    def test_visit_place(self):
+        # pk = 2, New York
+        visit_place_url = reverse("place_was_visited", args=(2, ))
+        response = self.client.post(visit_place_url, follow=True)
+
+        self.assertTemplateUsed(response, "travel_wishlist/wishlist.html")
+
+        self.assertNotContains(response, "New York")
+
+        new_york = Place.objects.get(pk=2)
+
+        self.assertTrue(new_york.visited)
+
+
+    def test_visit_non_existent_place(self):
+        # visit place with pk = 200 (not in the fixtures)
+        visit_place_url = reverse("place_was_visited", args=(200, ))
+        response = self.client.post(visit_place_url, follow=True)
+        self.assertEqual(404, response.status_code)
